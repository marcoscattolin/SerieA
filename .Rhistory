pairs(swiss, panel=panel.smooth,col=3+(swiss$Catholic > 50))
lm(Fertility .~, data=swiss)
lm(Fertility.~, data=swiss)
lm(Fertility~., data=swiss)
summary(lm(Fertility~., data=swiss))
fit <- lm(Fertility~., data=swiss)
plot(fit)
View(swiss)
summary(fit)
fit <- lm(Fertility~Agriculture, data=swiss)
summary(fit)
summary(fit)$cov.unscaled
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
plot(x,y)
lm <- fit(x,y)
fit <- lm(x~y)
abline(fit$coefficients)
hatvalues(fit)
dfbetas(fit)
fit <- lm(y~x)
abline(fit$coefficients)
hatvalues(fit)
dfbetas(fit)
which.max(hatvalues(fit))
dfbetas(fit)[5]
dfbetas(fit)[,5]
dfbetas(fit)[5,]
dfbetas(fit)[which.max(hatvalues(fit)),]
hatvalues(fit)
odds <- c(1.28,5.25,11)
p <- odds/(1+odds)
sum(p)
sum(1/odds)
odds <- c(2.2,3.1,3.5)
sum(1/odds)
attach(mtcars)
fit <- (mpg~factor(am)
)
fit
sumamry(fit)
fit <- lm(mpg~factor(am))
summary(fit)
fit <- lm(mpg~factor(am)+hp)
summary(fit)
confint(fit)
fit1 <- lm(mpg~factor(am)+hp)
confint(fit1)
fit1 <- lm(mpg~factor(am))
confint(fit1)
fit2 <- lm(mpg~factor(am)+hp)
confint(fit2)
fit2 <- lm(mpg~factor(am)*hp)
summary(fit2)
fit1 <- lm(mpg~factor(am))
density(resid(fit1))
hist(resid(fit1))
plot(density(resid(fit1)))
fit2 <- lm(mpg~factor(am)+hp)
plot(density(resid(fit2)))
fit2 <- lm(mpg~.)
fit3 <- lm(mpg~.,mtcars)
plot(density(resid(fit3)))
summary(fit3)
fit3 <- lm(mpg~.,mtcars)
summary(fit3)
summary(fit1)
plot(am,wt)
fit4 <- lm(mpg~factor(am)+hp+wt)
plot(density(resid(fit4)))
summary(fit4)
fit4 <- lm(mpg~factor(am)+wt)
summary(fit4)
boxplot(mpg~factor(am))
plot(density(mpg))
fit4 <- lm(mpg~factor(am)+hp+factor(am)*hp)
summary(fit4)
plot(density(resid(fit4)))
plot(fit4)
plot(am,hp)
plot(am,wt)
plot(hp,mpg,col=am)
plot(hp,mpg,col=factor(am))
plot(hp,mpg,col=factor(am),pch=19)
abline(fit1)
fit1
abline(h=fit$coefficients[1])
abline(h=fit$coefficients[1],col="red")
abline(h=fit$coefficients[2])
abline(h=(fit$coefficients[2]+fit$coefficients[1]))
fit1 <- lm(mpg~factor(am))
plot(density(resid(fit1)))
plot(hp,mpg,col=factor(am),pch=19)
abline(h=fit$coefficients[1])
abline(h=fit$coefficients[1],col="red")
abline(h=(fit$coefficients[1]+fit$coefficients[2]),col="red")
boxplot(mpg~factor(am))
plot(hp,mpg,col=factor(am),pch=19)
abline(h=fit1$coefficients[1],col="red")
plot(hp,mpg,col=factor(am),pch=19)
abline(h=fit1$coefficients[1])
abline(h=(fit1$coefficients[1]+fit1$coefficients[2]),col="red")
fit2
abline(fit2$coefficients[1],fit2$coefficients[3])
abline(fit2$coefficients[1]+fit2$coefficients[2],fit2$coefficients[3],col="red")
influence.measures(fit)
influence.measures(fit2)
mtcar,29
mtcars[,29]
mtcars[29,]
mtcars[31,]
plot(fit2)
plot(fit2)
dfbetas(fit2)
dffits(fit2)
library(plyr)
library(dplyr)
install.packages("dplyr")
library(dplyr)
data <- mtcars
tmp <- group_by(data,cyl)
View(data)
View(tmp)
summarise(tmp,mean)
summarise(tmp,mean(hp))
summarise(tmp,mean(hp),var(hp))
summarise(data,mean(hp),var(hp))
class(tmp)
str(tmp)
summarise(tmp,mean(hp),var(hp),n())
summarise(tmp,mean=mean(hp),var(hp),n())
tmp$tst <- 1
summarise(tmp,mean=mean(hp),var(hp),sum(tst))
install.packages("caret")
install.packages("e1071")
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
training <- vowel.train
testing <- vowel.test
set.seed(33833)
library(caret)
training <- vowel.train
testing <- vowel.test
training$y <- as.factor(training$y)
testing$y <- as.factor(testing$y)
set.seed(33833)
modRF <- train(y=training$y,method="rf",data=training)
modRF <- train(y~.,method="rf",data=training)
modGBM <- train(y~.,method="gbm",data=training,verbose=F)
resRF <- predict(modRF,testing)
resGBM <- predict(modGBM,testing)
sum(testing$y == resRF)/length(resRF)
sum(testing$y == resGBM)/length(resGBM)
agree <- resRF == resGBM
sum(testing$y[agree] == resGBM[agree])/length(resGBM[agree])
training <- vowel.train
testing <- vowel.test
training$y <- as.factor(training$y)
testing$y <- as.factor(testing$y)
set.seed(33833)
modRF <- train(y~.,method="rf",data=training)
modGBM <- train(y~.,method="gbm",data=training,verbose=F)
resRF <- predict(modRF,testing)
resGBM <- predict(modGBM,testing)
sum(testing$y == resRF)/length(resRF)
sum(testing$y == resGBM)/length(resGBM)
agree <- resRF == resGBM
sum(testing$y[agree] == resGBM[agree])/length(resGBM[agree])
training <- vowel.train
testing <- vowel.test
training$y <- as.factor(training$y)
testing$y <- as.factor(testing$y)
set.seed(33833)
modRF <- train(y~.,method="rf",data=training)
modGBM <- train(y~.,method="gbm",data=training,verbose=F)
resRF <- predict(modRF,testing)
resGBM <- predict(modGBM,testing)
sum(testing$y == resRF)/length(resRF)
sum(testing$y == resGBM)/length(resGBM)
agree <- resRF == resGBM
sum(testing$y[agree] == resGBM[agree])/length(resGBM[agree])
training <- vowel.train
testing <- vowel.test
training$y <- as.factor(training$y)
testing$y <- as.factor(testing$y)
set.seed(33833)
modRF <- train(y~.,method="rf",data=training)
set.seed(33833)
modGBM <- train(y~.,method="gbm",data=training,verbose=F)
resRF <- predict(modRF,testing)
resGBM <- predict(modGBM,testing)
sum(testing$y == resRF)/length(resRF)
sum(testing$y == resGBM)/length(resGBM)
agree <- resRF == resGBM
sum(testing$y[agree] == resGBM[agree])/length(resGBM[agree])
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
install.packages("AppliedPredictiveModeling")
#### QUIZ 2 ####
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modRF <- train(diagnosis~.,method="rf",data=training)
modGBM <- train(diagnosis~.,method="gbm",data=training,verbose=F)
modLDA <- train(diagnosis~.,method="lda",data=training)
predRF <- predict(modRF,testing)
predGBM <- predict(modGBM,testing)
predLDA <- predict(modLDA,testing)
predDF <- data.frame(predRF = predRF, predGBM = predGBM, predLDA = predLDA, diagnosis = testing$diagnosis)
modStacked <- train(diagnosis~.,method="rf",data=predDF)
View(predDF)
predStacked <- predict(modStacked,predDF)
sum(testing$diagnosis == predStacked)/length(testing$diagnosis)
sum(testing$diagnosis == predRF)/length(testing$diagnosis)
sum(testing$diagnosis == predGBM)/length(testing$diagnosis)
sum(testing$diagnosis == predLDA)/length(testing$diagnosis)
#### QUIZ 2 ####
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modRF <- train(diagnosis~.,method="rf",data=training)
set.seed(62433)
modGBM <- train(diagnosis~.,method="gbm",data=training,verbose=F)
set.seed(62433)
modLDA <- train(diagnosis~.,method="lda",data=training)
predRF <- predict(modRF,testing)
predGBM <- predict(modGBM,testing)
predLDA <- predict(modLDA,testing)
predDF <- data.frame(predRF = predRF, predGBM = predGBM, predLDA = predLDA, diagnosis = testing$diagnosis)
set.seed(62433)
modStacked <- train(diagnosis~.,method="rf",data=predDF)
predStacked <- predict(modStacked,predDF)
sum(testing$diagnosis == predStacked)/length(testing$diagnosis)
sum(testing$diagnosis == predRF)/length(testing$diagnosis)
sum(testing$diagnosis == predGBM)/length(testing$diagnosis)
sum(testing$diagnosis == predLDA)/length(testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
modLASSO <- train(diagnosis~.,method="lasso",data=training,)
modLASSO <- train(CompressiveStrength~.,method="lasso",data=training,)
modLASSO <- train(CompressiveStrength~.,method="lasso",data=training)
modLASSO
plot.enet(modLASSO)
modLASSO$bestTune
modLASSO$modelType
modLASSO$modelInfo
modLASSO$results
modLASSO$pred
modLASSO$call
modLASSO$metric
modLASSO$dots
modLASSO$control
modLASSO$finalModel
modLASSO$terms
modLASSO$coefnames
modLASSO$xlevels
modLASSO$finalModel
?lars
modLASSO <- train(CompressiveStrength~.,method="lasso",data=training,trace=T)
plot.enet(modLASSO$finalModel)
modLASSO$finalModel
plot.enet(modLASSO$finalModel,cex=0.5)
plot.enet(modLASSO$finalModel,use.color=T)
plot(1:10,1:10,col=1:10)
plot(1:8,1:8,col=1:8)
plot.enet(modLASSO$finalModel,use.color=T)
plot(1:8,1:8,col=1:8)
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
library(lubridate)
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
install.packages("forecast")
library(forecast)
bats(tstrain)
mod <- bats(tstrain)
predict(mod)
class(mod)
?bats
forecast(mod)
testing
summary(training)
summary(testing)
forecast(mod)
forecast(mod,100)
forecast(mod,length(testing))
forecast(mod,length(testing[,1]))
forecast(mod,length(testing[,1]))[,c(5,6)]
forecast(mod,length(testing[,1]))[[,c(5,6)]]
forecast(mod,length(testing[,1]))
res <- forecast(mod,length(testing[,1]))
res <- forecast(mod,length(testing[,1]))$fitted
res
res <- forecast(mod,length(testing[,1]))
res
head(res)
res$upper
res
res
res$upper
res$upper[,2]
res
res$upper[,2]
res$lower[,2]
df <- data.frame(upper = res$upper[,2], lower = res$lower[,2], actual = testing$visitsTumblr)
View(df)
df$actual > df$lower & df$actual < df$upper
sum(df$actual > df$lower & df$actual < df$upper)
226/235
sum(df$actual > df$lower & df$actual < df$upper)/length(df[,1])
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
mod <- bats(tstrain)
res <- forecast(mod,length(testing[,1]))
df <- data.frame(upper = res$upper[,2], lower = res$lower[,2], actual = testing$visitsTumblr)
sum(df$actual > df$lower & df$actual < df$upper)/length(df[,1])
library(e1071)
set.seed(3523)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
?svm
aa <- svm(concrete$CompressiveStrength)
aa
aa$cost
summary(aa)
predict(aa,testing)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
model <- svm(concrete$CompressiveStrength)
predict(model,testing)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
model <- svm(CompressiveStrength~.,data=training)
predict(model,testing)
res <- predict(model,testing)
res-testing$CompressiveStrength
(res-testing$CompressiveStrength)^2
mean((res-testing$CompressiveStrength)^2)
sqrt(mean((res-testing$CompressiveStrength)^2))
#### quiz 3 ####
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
modLASSO <- train(CompressiveStrength~.,method="lasso",data=training)
plot.enet(modLASSO$finalModel,use.color=T)
### quiz 5 ####
library(e1071)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
model <- svm(CompressiveStrength~.,data=training)
res <- predict(model,testing)
sqrt(mean((res-testing$CompressiveStrength)^2))
?plot.enet
#### quiz 4 ####
library(lubridate)
library(forecast)
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
mod <- bats(tstrain)
res <- forecast(mod,length(testing[,1]))
res
df <- data.frame(fcst = res$fitted,upper = res$upper[,2], lower = res$lower[,2], actual = testing$visitsTumblr)
res$fitted
library(lubridate)
library(forecast)
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
mod <- bats(tstrain)
res <- forecast(mod,length(testing[,1]))
df <- data.frame(fcst = res$fitted,upper = res$upper[,2], lower = res$lower[,2], actual = testing$visitsTumblr)
sum(df$actual > df$lower & df$actual < df$upper)/length(df[,1])
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
mod <- bats(tstrain)
res <- forecast(mod,length(testing[,1]))
res$x
res
res$upper[,2]
res
res$fitted
res$fitted
forecast(mod)
res <- forecast(mod,235)
res
res$mean
res
library(lubridate)
library(forecast)
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
mod <- bats(tstrain)
res <- forecast(mod,235)
df <- data.frame(fcst = res$mean,upper = res$upper[,2], lower = res$lower[,2], actual = testing$visitsTumblr)
sum(df$actual > df$lower & df$actual < df$upper)/length(df[,1])
View(df)
setwd("~/Coursera/SerieA")
library(XML)
url <- "http://www.corrieredellosport.it/calcio/serie_a/"
html <- htmlTreeParse(url)
links <- xpathSApply(html,path="//div//ul//li//a",xmlattrs,"href")
links <- xpathSApply(html,path="//div//ul//li//a",xmlgetattrs,"href")
?xpathSApply
links <- xpathSApply(html,path="//div//ul//li//a",xmlGetAttr("href"))
html <- htmlTreeParse(url,useInternalNodes=T)
links <- xpathSApply(html,path="//div//ul//li//a",xmlGetAttr("href"))
links <- xpathSApply(html,path="//div//ul//li//a",xmlGetAttr,"href")
links
links <- xpathSApply(html,path="//div[@class == 'classificaHead']//ul//li//a",xmlGetAttr,"href")
links <- xpathSApply(html,path="//div[@class = 'classificaHead']//ul//li//a",xmlGetAttr,"href")
links
team <- links[15]
html <- htmlTreeParse(team,useInternalNodes=T)
team <- gsub(" ","%20"links[15])
team <- gsub(" ","%20",links[15])
html <- htmlTreeParse(team,useInternalNodes=T)
team <- paste0("http://www.corrieredellosport.it/",team)
team
html <- htmlTreeParse(team,useInternalNodes=T)
html
html
link <- xpathSApply(html,path="//div[@class = 'menuInt']//ul//li//a",xmlGetAttr,"href")
link
link <- xpathSApply(html,path="//div[@class = 'menuInt']//ul//li//a",xmlGetAttr,"href")[3]
link
link <- gsub(" ","%20",link)
link <- paste0("http://www.corrieredellosport.it/",link)
html <- htmlTreeParse(link,useInternalNodes=T)
html
stats <- xpathSApply(html,path="//dl/dt/dd",xmlGetAttr,"href")[3]
stats
stats <- xpathSApply(html,path="//dl//dt//dd",xmlGetAttr,"href")[3]
stats
html
link
url <- "http://www.corrieredellosport.it/calcio/serie_a/"
html <- htmlTreeParse(url,useInternalNodes=T)
links <- xpathSApply(html,path="//div[@class = 'classificaHead']//ul//li//a",xmlGetAttr,"href")
#### begin for loop
team <- gsub(" ","%20",links[15])
team <- paste0("http://www.corrieredellosport.it",team)
team
html <- htmlTreeParse(team,useInternalNodes=T)
link <- xpathSApply(html,path="//div[@class = 'menuInt']//ul//li//a",xmlGetAttr,"href")[3]
link
link <- gsub(" ","%20",link)
link <- paste0("http://www.corrieredellosport.it",link)
html <- htmlTreeParse(link,useInternalNodes=T)
html
url <- "https://it.eurosport.yahoo.com/calcio/squadre/roma/formazione/"
html <- htmlTreeParse(url,useInternalNodes=T)
url <- "https://it.eurosport.yahoo.com/calcio/serie-a/"
html <- htmlTreeParse(url,useInternalNodes=T)
url <- "https://it.eurosport.yahoo.com/calcio/squadre/roma/formazione.html"
html <- htmlTreeParse(url,useInternalNodes=T)
